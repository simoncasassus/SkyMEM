.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "WCS 3"
.TH WCS 3 "2020-03-22" "perl v5.28.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WCS
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
interface for libwcs, which can be found as part of the wcstools
package at http://tdc\-www.harvard.edu/software/wcstools/
.PP
libwcs is the interface written by Doug Mink to access the projections
routines of Mark Calabretta,
.PP
http://www.atnf.csiro.au/people/mcalabre/WCS/index.html
.PP
based on the latest \s-1FITS\s0 standard (Calabretta & Griesen astro\-ph/0207413).
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "wcs2pix"
.IX Subsection "wcs2pix"
.Vb 1
\&  Signature: (a(n,m); d(n,m); [o] x(n,m); [o] y(n,m))
.Ve
.PP
input \s-1WCS\s0 in deg. 
wcs2pix can also take single scalar arguments.
.SS "pix2wcs"
.IX Subsection "pix2wcs"
.Vb 1
\&         Signature: (x(n,m); y(n,m); [o] a(n,m); [o] d(n,m))
.Ve
.PP
output \s-1WCS\s0 in deg.
pix2wcs can also take single scalar arguments.
.PP
Usage:
.PP
($x,$y) = &WCS::wcs2pix($filename,$ra,$dec);
.PP
($ra2,$dec2) = &WCS::pix2wcs($filename,$x,$y);
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\& .....
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
simon casassus
.PP
simon@das.uchile.cl
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "proj_meat"
.IX Subsection "proj_meat"
.Vb 1
\&  Signature: (ra(n,m);  dec(n,m); x(n,m); y(n,m); ; int direction; int dohead; char* filename; )
.Ve
.PP
info not available
.PP
proj_meat does not process bad values.
It will set the bad-value flag of all output piddles if the flag is set for any of the input piddles.
